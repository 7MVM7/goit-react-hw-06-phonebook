{"version":3,"sources":["Components/ContactsForm/ContactsForm.styled.jsx","redux/actions.js","Components/ContactsForm/ContactsForm.jsx","Components/Filter/Filter.styled.jsx","Components/Filter/Filter.jsx","Components/ContactsList/ContactsList.styled.jsx","redux/seloctors.js","Components/ContactsList/ContactsList.jsx","Components/App.jsx","redux/reducers.js","redux/store.js","index.js"],"names":["MyForm","styled","form","addContact","createAction","deleteContact","filterContact","ContactsForm","useState","name","setName","number","setNumber","contacts","useSelector","state","items","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","map","contact","includes","alert","addNewContact","id","shortid","generate","type","onChange","pattern","title","required","PropsType","PropTypes","func","isRequired","MyLabel","label","Filter","filter","target","MyList","ul","onFilteredContacts","normalizedFilter","toLowerCase","trim","ContactsList","className","onClick","App","createReducer","action","payload","rootReducer","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","obj","persistor","persistStore","ReactDOM","render","StrictMode","data","loading","document","getElementById"],"mappings":"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","file":"static/js/main.ab44c26a.chunk.js","sourcesContent":["import styled from '@emotion/styled';\nexport const MyForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n    margin-right: auto;\n  width: 310px;\n  height: 250px;\n  border: 2px solid darkgrey;\n  border-radius: 5px;\n  padding: 15px;\n  background-color: snow;\n\n label{\n\n\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 1.18;\n}\ninput{\n  padding: 10px;\n  border: 2px solid #00e45f;\n  border-radius: 15px;\n  font-size: 18px;\n  font-weight: 500;\n  width: 250px;\n  font-size: 14px;\n  margin-top: 10px;\n  margin-bottom: 20px;\n}\n  button{\n    \n    margin-left: auto;\n    margin-right: auto;\n  font-size: 16px;\n  width: 150px;\n  padding: 4px;\n  border: 2px solid darkgrey;\n  border-radius: 4px;\n  background-color: darkgrey;\n  margin-top: 20px;\n  cursor: pointer;\n}\n`\n\n\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction(\"contacts/addContact\");\r\nexport const deleteContact = createAction(\"contacts/deleteContact\");\r\nexport const filterContact = createAction(\"contacts/filterContact\");\r\n","// import React, { useState } from \"react\";\n// import { useSelector, useDispatch } from 'react-redux';\n// import { v4 as uuidv4 } from \"uuid\";\n// // import PropTypes from \"prop-types\";\n// import { MyForm } from \"./ContactsForm.styled\";\n// import { addContact } from \"../../redux/actions\";\n\n\n\n\n// export default function ContactsForm({ onSubmit }) {\n//   const [name, setName] = useState(\"\");\n//   const [number, setNumber] = useState(\"\");\n//   const contacts = useSelector(state => state.contacts);\n//   const dispatch = useDispatch ();\n  \n//   const  handleChange  = (e) => {\n//     const { name, value } = e.target;\n//     switch (name) {\n//       case \"name\":\n//         setName(value);\n//         break;\n//       case \"number\":\n//         setNumber(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n\n//   const handleSubmit = e => {\n\n//     e.preventDefault(); \n\n// //   const findContact = contacts.find(\n// //     contact => contact.name.toLowerCase() === name.toLowerCase(),\n// //     );\n    \n// //     if (findContact) {\n// //       alert(`${name} is already in contacts`);\n// //       return;\n// //     } else {\n// //       dispatch(addContact({ \n// //         id: uuidv4(),\n// //         name,\n// //         number,\n// //       }));\n// //     setName('');\n// //     setNumber('');\n// //   }\n  \n//  };\n\n//   const submitContact = ({ name, number }) => {\n//     const addContact = {\n//       id: uuidv4(),\n//       name,\n//       number,\n//     };\n\n//   //   contacts.find(\n//   //     (contact) => contact.name.toLowerCase() === addContact.name.toLowerCase()\n//   //   )\n//   //     ? alert(`${name} is already in contacts`)\n//   //     : setContacts((prevContacts) => [addContact, ...prevContacts]);\n//   // };\n\n//   const deleteContact = (id) => {\n//     setContacts((prev) => prev.filter((contact) => contact.id !== id));\n//   };\n\n\n\n\n//   dispatch(addContact(addNewContact));\n//   // const submit = (e) => {\n//   //   e.preventDefault();\n//   //   // onHandleSubmit({ name, number });\n//     reset();\n//   };\n//   const reset = () => {\n//     setName(\"\");\n//     setNumber(\"\");\n//   };\n//   return (\n//     <MyForm onSubmit={submit}>\n//       <label>\n//         Name\n//         <input\n//           onChange={change}\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           placeholder=\"Enter your name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//         />\n//         Number\n//       </label>\n//       <input\n//         onChange={change}\n//         placeholder=\"Enter your phone number\"\n//         type=\"tel\"\n//         name=\"number\"\n//         value={number}\n//         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//         title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//         required\n//       />\n//       <button type=\"submit\">Add contact</button>\n//     </MyForm>\n//   );\n// }\n\n// // ContactsForm.propTypes = {\n// //   onHandleSubmit: PropTypes.func.isRequired,\n// // };\nimport PropTypes from 'prop-types';\nimport { MyForm } from \"./ContactsForm.styled\";\nimport { useState } from 'react';\nimport shortid from 'shortid';\nimport { addContact } from '../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ContactsForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(state => state.items);\n  const dispatch = useDispatch();\n\n \n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n \n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (contacts.map(contact => contact.name).includes(name)) {\n      alert(`Sorry, but ${name} is already in contacs.`);\n      return;\n    }\n\n \n    const addNewContact = {\n\n      name,\n      number,\n      id: shortid.generate(),\n    };\n\n    dispatch(addContact(addNewContact));\n   \n    reset();\n  };\n\n  \n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <MyForm onSubmit={handleSubmit}>\n            <label>\n             \n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n         Number\n           </label>\n\n      \n       \n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n    \n    <button type=\"submit\">Add contact</button>\n    </MyForm>\n  );\n}\n\nContactsForm.PropsType = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n\nexport default ContactsForm;\n\n","import styled from '@emotion/styled';\nexport const MyLabel = styled.label`\n\n  display: flex;\n  flex-direction: column;\n  font-family: \"Arial\";\n  font-weight: 700;\n  font-size: 15px;\n  line-height: 1.14;\n  margin-top: 15px;\n  margin-left: 20px;\n\n    input{\n      \n  width: 300px;\n  border: 4px solid #00ffe5;\n  border-radius: 15px ;\n\n  padding: 8px;\n  margin-top: 8px;\n}\n`","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { MyLabel } from \"./Filter.styled\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContact } from '../../redux/actions';\n\n\nfunction Filter () {\n  const value = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <MyLabel>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={(e) => dispatch\n          (filterContact(e.target.value))}\n      />\n    </MyLabel>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\nexport default Filter;\n","import styled from '@emotion/styled';\nexport const MyList = styled.ul`\npadding: 0;\n    .contact {\n      margin-left: 20px;\n\n  display: flex;\n  align-items: center;\n  font-size: 15px;\n  font-weight: 400;\n  line-height: 1.18;\n  margin-bottom: 8px;\n}\n.buttonDelete {\n\n\n  margin-left: 10px;\n  border: 2px solid red;\n  font-size: 13px;\n  font-weight: 700;\n  border-radius: 4px;\n  background-color: #ffae00;\n  color: black;\n  cursor: pointer;\n}\n\n`","export const onFilteredContacts = ({ items, filter }) => {\r\n  const normalizedFilter = filter.toLowerCase().trim();\r\n  return items.filter((contact) =>\r\n    contact.name.toLowerCase().trim().includes(normalizedFilter)\r\n  );\r\n};\r\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MyList } from \"./ContactsList.styled\";\nimport { deleteContact } from '../../redux/actions';\nimport { onFilteredContacts } from '../../redux/seloctors';\n\nfunction ContactsList () {\n  const contacts = useSelector(onFilteredContacts);\n\n  const dispatch = useDispatch();\n  return (\n    <MyList>\n      {contacts.map(({ name, number, id }) => (\n        <li className=\"contact\" key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <button\n            className=\"buttonDelete\"\n            type=\"button\"\n            onClick={() => dispatch (deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </MyList>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.array,\n  deleteContact: PropTypes.func,\n};\n\nexport default ContactsList;\n","// import React, { useState, useEffect } from \"react\";\n\nimport ContactsForm from \"./ContactsForm/ContactsForm\";\nimport Filter from \"./Filter/Filter\";\nimport ContactsList from \"./ContactsList/ContactsList\";\n// import data from \"./data\";\n\nexport default function App() {\n  // const [contacts, setContacts] = useState(() => {\n  //   return JSON.parse(window.localStorage.getItem(\"contacts\")) ?? data;\n  // });\n  // const [filter, setFilter] = useState(\"\");\n\n  // useEffect(() => {\n  //   window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  // }, [contacts]);\n\n  \n\n  // const changeFilterInput = (e) => {\n  //   setFilter(e.target.value);\n  // };\n\n  // const onFilteredContacts = () => {\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(filter.toLowerCase())\n  //   );\n  // };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactsForm/>\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList/>\n    </div>\n  );\n}\n","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, filterContact } from \"./actions\";\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: (state, action) => [...state, action.payload],\r\n  [deleteContact]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [filterContact]: (state, action) => action.payload,\r\n});\r\n\r\nconst rootReducer = combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./reducers\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst persistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n};\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  devTools: true,\r\n});\r\nconst persistor = persistStore(store);\r\nconst obj = { store, persistor };\r\n\r\nexport default obj;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App.jsx\";\nimport { Provider } from \"react-redux\";\nimport data from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={data.store}>\n      <PersistGate loading={null} persistor={data.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}